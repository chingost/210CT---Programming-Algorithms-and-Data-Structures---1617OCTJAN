#include <iostream>

class BinTreeNode(object):

    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None


        
def tree_insert( tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        else:
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree

def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)
 

def in_order(tree):
    if(tree.left!=None):
        in_order(tree.left)
    print (tree.value)
    if(tree.right!=None):
        in_order(tree.right)
        
def inOrder(tree):
    node = tree #pointer to keeptrack of location in tree
    stack = [] #initialize stack
    endCase = False
    while endCase!= 1:
        #going to the last node in that
        #protion of the tree
        if node != None:
            stack.append(node)
            node = node.left
        else:
            #if stack empty/=0 break out of loop'''
            if(len(stack) >0 ):
                #pop top of stack which is last value
                #in that protion of the tree'''
                node = stack.pop()
                print (node.value)
                node = node.right 
 
            else:
                endCase = True
            
    
    

if __name__ == '__main__':
    
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  in_order(t)
  inOrder(t)
  
